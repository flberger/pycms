Documentation for pycms
=======================

pycms is a web content management system based on CherryPy.

Import
------

To use the pycms API, first import the pycms modules.

    >>> import pycms
    >>> import pycms.create
    >>> import pycms.edit
    >>> import pycms.serve
    >>>


Initialising files and directories for a new instance
-----------------------------------------------------

pycms needs a working environment to store the CMS contents in.

This is an ordinary directory, with a subdirectory for templates.

For a new pycms instance, this working environment must be created
before pycms can be used. Otherwise an exception will be raised when
trying to run pycms.

    >>> pycms.serve.serve("pycmsroot", test = True)
    Traceback (most recent call last):
    ...
    RuntimeError: Working environment directory 'pycmsroot' not found. Did you run pycms.envinit("pycmsroot")?
    >>>

The 'test' flag will terminate pycms after a short while, for
automated testing.

The envinit() function will take care of creating the
environment.

    >>> pycms.envinit("pycmsroot")
    >>>

There now is a basic environment to work with. Let's take a look:

    >>> import glob
    >>> glob.glob("pycmsroot/*")
    ['pycmsroot/index.html', 'pycmsroot/_uri_template_map.json', 'pycmsroot/_templates']
    >>> glob.glob("pycmsroot/_templates/*")
    ['pycmsroot/_templates/index_template.html']
    >>>


Adding templates
----------------

pycms templates are simple HTML files with placeholder lines.

To add a template, drop it into the '_templates' folder.

    >>> with open("pycmsroot/_templates/new_template.html", "wt") as templatefile:
    ...     templatefile.write('<!DOCTYPE html>\n<html>\n<meta charset="utf-8"/>\n<head>\n<title>TITLE</title>\n</head>\n<body>\nCONTENT\n</body>\n</html>')
    ...
    113
    >>> glob.glob("pycmsroot/_templates/*")
    ['pycmsroot/_templates/index_template.html', 'pycmsroot/_templates/new_template.html']
    >>>

Creating pages based on templates
---------------------------------

TODO


Running the pycms web server
----------------------------

Once there is a working environment, pycms can serve content from it.

The serve() function runs an HTTP server.

    >>> pycms.serve.serve("pycmsroot", test = True)
    >>>


Editing templates and applying changes
--------------------------------------

TODO


Editing page content
--------------------

TODO


pycms data representation
-------------------------

When preparing to serve, pymcs parses the working environment and
creates an internal data structure. This is done by the
pycms.envparse() function. This function expects the path to the
working enviromnemt and a pycms.CMS instance as input. For
demonstration purposes, we will use a dummy object here, bypassing
pycms.CMS.__init__().

    >>> class DummyCMS:
    ...     pass
    ...
    >>> dummy_cms = DummyCMS()
    >>> dummy_cms.__dict__["__class__"] = pycms.serve.CMS
    >>> pycms.serve.envparse("pycmsroot", dummy_cms)
    >>>

The CMS instance will be populated by the parsing results. In this
case, only the single root page is created, which can be obtained by
calling the CMS instance as a method. This yields the default page
created by pycms.envinit() above.

    >>> dummy_cms()
    '<!DOCTYPE html>\n<html>\n<meta charset="utf-8"/>\n<head>\n    <title>pycms Instance Index</title>\n</head>\n<body>\n    <h1>pycms Instance Index</h1>\n    <p>Welcome to your pycms instance.</p>\n</body>\n</html>'
    >>>

    
Deleting a pycms environment
----------------------------

To do this, simply delete the project folder.

    >>> import shutil
    >>> shutil.rmtree("pycmsroot")
    >>>


Command line interface
----------------------

To make pycms serve content over an HTTP socket, issue the command

    python pycms.py htmlroot

on the command line. `htmlroot` is a directory containing the data to serve
from and to save to. If written as above, pycms assumes it to be a local
subdirectory. You can also give full qualified paths as `/home/user/htmlroot`
or `C:\htmlroot\`, depending on your operatings system.
